/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")

    // Api
    implementation("io.javalin:javalin:5.6.3")

    // Using pac4j for authentication, versions are from the pac4j-javalin documentation as there's an issue with the latest version
    // https://github.com/pac4j/javalin-pac4j/blob/master/README.md#1-add-the-required-dependencies-javalin-pac4j-and-pac4j--libraries
    implementation( 'org.pac4j:javalin-pac4j:6.0.0')
    runtimeOnly('org.pac4j:pac4j-core:5.7.1')
    implementation('org.pac4j:pac4j-config:5.7.1')
    implementation('org.pac4j:pac4j-oauth:5.7.1')

    // MongoDB
    implementation("org.mongodb:mongodb-driver-sync:4.11.1")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.16.1")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.16.1")

    // Configuration
    implementation('io.github.cdimascio:dotenv-java:3.0.0')

    // Logger
    implementation('org.slf4j:slf4j-simple:2.0.10')

    // Dependency injection
    implementation('com.google.dagger:dagger:2.51')
    annotationProcessor('com.google.dagger:dagger-compiler:2.51')
}

application {
    // Define the main class for the application.
    mainClass = 'api.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task rmGeneratedFiles(type: Delete) {
    delete 'src/main/java/api/generated'
    println 'Deleted src/main/java/api/generated files'
}

import com.zaptross.codegen.BuildRouteApiBuilderTask;
task buildApiBuilders(type: BuildRouteApiBuilderTask) {
    configure {
        mustRunAfter rmGeneratedFiles
    }
}
import com.zaptross.codegen.BuildCollectionFactoryTask;
task buildCollectionFactory(type: BuildCollectionFactoryTask) {
    configure {
        mustRunAfter buildApiBuilders
    }
}

gradle.beforeProject {
    tasks.named('compileJava').configure {
        dependsOn buildCollectionFactory
        dependsOn buildApiBuilders
        mustRunAfter buildCollectionFactory
        mustRunAfter buildApiBuilders
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'api.App',
                'Class-Path': '/libs/*.jar'
        )
    }
}